import { ChangeDetectorRef, Component, inject, Input, OnDestroy, OnInit } from '@angular/core';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import { Subscription } from 'rxjs';
import { VulnerabilityReportsViewReport } from '../../../core/models/vulnerabilityReport';
import { ConfigService } from '../../../core/services/config.service';

import { TableModule } from 'primeng/table';
import { MultiSelectModule } from 'primeng/multiselect';
import { ButtonModule } from 'primeng/button';
import { BadgeModule } from 'primeng/badge';

@Component({
  selector: 'app-vulnerability-report',
  templateUrl: './vulnerability-report.component.html',
  styleUrls: ['./vulnerability-report.component.scss'],
  imports: [TranslateModule, TableModule, MultiSelectModule, ButtonModule, BadgeModule],
})
export class VulnerabilityReportComponent implements OnInit, OnDestroy {
  private configService = inject(ConfigService);
  private translateService = inject(TranslateService);
  private changeDetector = inject(ChangeDetectorRef);
  @Input() report: VulnerabilityReportsViewReport;

  rowsPerPage = this.configService.config.rowsPerPage;
  key: number = 0;

  resultFilter: any[] = [];

  private subscriptions = new Subscription();

  ngOnInit(): void {
    this.addDataKey();
    this.setupFilterOptions();
    this.subscriptions.add(
      this.translateService.onLangChange.subscribe(() => {
        this.setupFilterOptions();
        this.changeDetector.detectChanges();
      }),
    );
    this.changeDetector.detectChanges();
  }

  ngOnDestroy(): void {
    this.subscriptions.unsubscribe();
  }

  private setupFilterOptions(): void {
    this.resultFilter = [
      { name: this.translateService.instant('pages.clusters.details.vulnerabilityreports.critical'), value: 'CRITICAL' },
      { name: this.translateService.instant('pages.clusters.details.vulnerabilityreports.high'), value: 'HIGH' },
      { name: this.translateService.instant('pages.clusters.details.vulnerabilityreports.medium'), value: 'MEDIUM' },
      { name: this.translateService.instant('pages.clusters.details.vulnerabilityreports.low'), value: 'LOW' },
      { name: this.translateService.instant('pages.clusters.details.vulnerabilityreports.unknown'), value: 'UNKNOWN' },
    ];
    this.changeDetector.detectChanges();
  }

  addDataKey(): void {
    this.report.vulnerabilities.forEach((vulnerability) => {
      vulnerability.dataKey = this.key.toString();
      this.key++;
    });
  }

  getValue(filterElements: any[]): string[] {
    return filterElements.map((filterElement) => filterElement.value);
  }

  getBadgeColor(severity: string): 'success' | 'info' | 'warn' | 'danger' {
    switch (severity) {
      case 'CRITICAL':
        return 'danger';
      case 'HIGH':
        return 'warn';
      case 'MEDIUM':
        return 'info';
      case 'LOW':
        return 'success';
      default:
        return 'danger';
    }
  }
}
